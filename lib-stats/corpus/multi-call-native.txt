{
    "apps/multi/AndyBot": [
        {
            "apps/multi/AndyBot/src/stt.py": [
                "os.system(FLAC_CONV + ' ' + filename)"
            ]
        },
        {
            "apps/multi/AndyBot/src/main.py": [
                "subprocess.Popen(['python', 'LED.py'])",
                "subprocess.Popen(['python', 'server.py'])"
            ]
        },
        {
            "apps/multi/AndyBot/src/tts.py": [
                "os.system(\"espeak \" + json.dumps(message) + OPTIONS)",
                "os.system(\"aplay -D hw:1 say.wav\")"
            ]
        },
        {
            "apps/multi/AndyBot/src/mic.py": [
                "os.system(\"aplay -D hw:1,0 beep_hi.wav\")",
                "os.system(\"aplay -D hw:1,0 beep_lo.wav\")",
                "os.system(\"sox \"+AUDIO_FILE+\" temp.wav vol 20dB\")"
            ]
        },
        {
            "apps/multi/AndyBot/src/cmds.py": [
                "os.system('/home/pi/Dropbox-Uploader/./dropbox_uploader.sh upload ' +'/home/pi/ANDY/pictures/' + str(self.num) + '.jpg ' + str(self.num) + '.jpg')",
                "os.system('/home/pi/Dropbox-Uploader/./dropbox_uploader.sh upload ' +'/home/pi/ANDY/pictures/' + str(self.num) + '.jpg ' + str(self.num) + '.jpg')",
                "os.system(\"sudo halt\")"
            ]
        },
        {
            "apps/multi/AndyBot/src/server.py": [
                "os.system('sudo chmod 777 /home/pi/ANDY/src/temp/cmd.txt')"
            ]
        },
        {
            "apps/multi/AndyBot/src/getcmd.py": [
                "os.system('sudo rm /home/pi/ANDY/src/temp/cmd.txt')"
            ]
        },
        {
            "apps/multi/AndyBot/src/sttwin.py": [
                "os.system(FLAC_CONV + ' ' + filename)"
            ]
        }
    ],
    "apps/multi/BeagleAlexa": [
        {
            "apps/multi/BeagleAlexa/beagleman.py": [
                "os.system('espeak -ven-uk -p50 -s140 \"'+string+'\" > /dev/null 2>&1')",
                "os.system('play  -c 1 -r 24000 -q {}response.mp3  > /dev/null 2>&1'.format(path))",
                "os.system(\"sox -t raw -r 16000 -e signed -b 16 -c 1 \"+filename_raw+\" \"+filename+\" && sync\");"
            ]
        }
    ],
    "apps/multi/DIYSmartphone": [
        {
            "apps/multi/DIYSmartphone/apps/power/power.py": [
                "from subprocess import Popen",
                "os.system('sudo python /home/pi/tyos/src/power.py') #Power off fona",
                "a = Popen(['sudo', 'halt']) #Power down Raspberry Pi",
                "from subprocess import Popen",
                "os.system('sudo python /home/pi/tyos/src/power.py') #Power off fona",
                "a = Popen(['sudo', 'halt']) #Power down Raspberry Pi"
            ]
        },
        {
            "apps/multi/DIYSmartphone/apps/camera/app.py": [
                "from subprocess import Popen",
                "cam = Popen(['/home/pi/Dropbox-Uploader/./dropbox_uploader.sh', 'upload', '/home/pi/Photos/' +self.images[self.current_image], self.images[self.current_image]])",
                "cam = Popen(['sudo', 'python', '/home/pi/tyos/src/main.py'])",
                "from subprocess import Popen",
                "cam = Popen(['/home/pi/Dropbox-Uploader/./dropbox_uploader.sh', 'upload', '/home/pi/Photos/' +self.images[self.current_image], self.images[self.current_image]])",
                "cam = Popen(['sudo', 'python', '/home/pi/tyos/src/main.py'])"
            ]
        },
        {
            "apps/multi/DIYSmartphone/apps/camera/camera.py": [
                "from subprocess import Popenimport sys",
                "cam = Popen(['sudo', 'python', '/home/pi/tyos/apps/camera/app.py'])"
            ]
        },
        {
            "apps/multi/DIYSmartphone/src/toolbar.py": [
                "os.system('sudo date +%T -s \"' + self.rtc_time + '\"')"
            ]
        }
    ],
    "apps/multi/HAL9000": [
        {
            "apps/multi/HAL9000/selfie.py": [
                "process = subprocess.Popen(['aplay', '/home/pi/sounds/shutter.wav'])",
                "process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)"
            ]
        },
        {
            "apps/multi/HAL9000/wavplay.py": [
                "subprocess.Popen(['aplay', wav])",
                "subprocess.Popen(['aplay', wav])"
            ]
        },
        {
            "apps/multi/HAL9000/shutdown.py": [
                "process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)"
            ]
        },
        {
            "apps/multi/HAL9000/reboot.py": [
                "process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)"
            ]
        }
    ],
    "apps/multi/SamsungARKTIKPhotobooth.py": [
        {
            "apps/multi/SamsungARKTIKPhotobooth.py": [
                "subprocess.call(\"fbi -T 2 photo.jpg\", shell=True)"
            ]
        }
    ],
    "apps/multi/SmartMirror": [
        {
            "apps/multi/SmartMirror/py4j_server/__init__.py": [
                "from subprocess import Popen, PIPEfrom py4j.java_gateway import JavaGateway, GatewayClient, java_import",
                "_pid = Popen([\"java\", \"-classpath\", CLASSPATH, \"Py4JServer\", \"0\"],stdout=PIPE, stdin=PIPE)",
                "from subprocess import Popen, PIPEfrom py4j.java_gateway import JavaGateway, GatewayClient, java_import",
                "_pid = Popen([\"java\", \"-classpath\", CLASSPATH, \"Py4JServer\", \"0\"],stdout=PIPE, stdin=PIPE)"
            ]
        }
    ],
    "apps/multi/devicePresenseAlert": [
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/switch/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_TURN_ON, data)",
                "hass.services.call(DOMAIN, SERVICE_TURN_OFF, data)",
                "hass.services.call(DOMAIN, SERVICE_TOGGLE, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/core.py": [
                "def call(self, domain, service, service_data=None, blocking=False):",
                "self.async_call(domain, service, service_data, blocking),",
                "def async_call(self, domain, service, service_data=None, blocking=False):",
                "def _event_to_service_call(self, event):"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/media_player/braviatv.py": [
                "from subprocess import Popen, PIPE",
                "pid = Popen([\"arp\", \"-n\", ip_address], stdout=PIPE)",
                "from subprocess import Popen, PIPE",
                "pid = Popen([\"arp\", \"-n\", ip_address], stdout=PIPE)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/switch/command_line.py": [
                "success = (subprocess.call(command, shell=True) == 0)",
                "return_value = subprocess.check_output(command, shell=True)",
                "return subprocess.call(command, shell=True) == 0"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/light/__init__.py": [
                "hass.async_add_job(hass.services.async_call(DOMAIN, SERVICE_TURN_ON, data))",
                "hass.async_add_job(hass.services.async_call(DOMAIN, SERVICE_TURN_OFF, data))",
                "hass.services.call(DOMAIN, SERVICE_TOGGLE, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/google.py": [
                "hass.services.call(DOMAIN, SERVICE_FOUND_CALENDARS,calendar)",
                "hass.services.call(DOMAIN, SERVICE_SCAN_CALENDARS, None)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/notify/command_line.py": [
                "proc = subprocess.Popen(self.command, universal_newlines=True,stdin=subprocess.PIPE, shell=True)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/lock/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_LOCK, data)",
                "hass.services.call(DOMAIN, SERVICE_UNLOCK, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/cover/command_line.py": [
                "success = (subprocess.call(command, shell=True) == 0)",
                "return_value = subprocess.check_output(command, shell=True)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/persistent_notification.py": [
                "hass.async_add_job(hass.services.async_call(DOMAIN, SERVICE_CREATE, data))"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/camera/rpi_camera.py": [
                "subprocess.Popen(['killall', 'raspistill'],stdout=subprocess.DEVNULL,",
                "subprocess.Popen(cmd_args,stdout=subprocess.DEVNULL,",
                "subprocess.Popen(['killall', 'raspistill'],stdout=subprocess.DEVNULL,",
                "subprocess.Popen(cmd_args,stdout=subprocess.DEVNULL,"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/tts/__init__.py": [
                "yield from hass.services.async_call(DOMAIN_MP, SERVICE_PLAY_MEDIA, data, blocking=True)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/device_tracker/ping.py": [
                "pinger = subprocess.Popen(self._ping_cmd, stdout=subprocess.PIPE)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/notify/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_NOTIFY, info)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/climate/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_SET_AWAY_MODE, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_AUX_HEAT, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_TEMPERATURE, kwargs)",
                "hass.services.call(DOMAIN, SERVICE_SET_HUMIDITY, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_FAN_MODE, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_OPERATION_MODE, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_SWING_MODE, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/mqtt/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_PUBLISH, data)",
                "hass.services.call(DOMAIN, SERVICE_PUBLISH, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/openalpr.py": [
                "hass.services.call(DOMAIN, SERVICE_SCAN, data)",
                "hass.services.call(DOMAIN, SERVICE_RESTART, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/remote/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_TURN_ON, data)",
                "hass.services.call(DOMAIN, SERVICE_TURN_OFF, data)",
                "hass.services.call(DOMAIN, SERVICE_SEND_COMMAND, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/media_player/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_TURN_ON, data)",
                "hass.services.call(DOMAIN, SERVICE_TURN_OFF, data)",
                "hass.services.call(DOMAIN, SERVICE_TOGGLE, data)",
                "hass.services.call(DOMAIN, SERVICE_VOLUME_UP, data)",
                "hass.services.call(DOMAIN, SERVICE_VOLUME_DOWN, data)",
                "hass.services.call(DOMAIN, SERVICE_VOLUME_MUTE, data)",
                "hass.services.call(DOMAIN, SERVICE_VOLUME_SET, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_PLAY_PAUSE, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_PLAY, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_PAUSE, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_STOP, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_NEXT_TRACK, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_PREVIOUS_TRACK, data)",
                "hass.services.call(DOMAIN, SERVICE_MEDIA_SEEK, data)",
                "hass.services.call(DOMAIN, SERVICE_PLAY_MEDIA, data)",
                "hass.services.call(DOMAIN, SERVICE_SELECT_SOURCE, data)",
                "hass.services.call(DOMAIN, SERVICE_CLEAR_PLAYLIST, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/tts/picotts.py": [
                "subprocess.call(cmd)",
                "subprocess.call(cmd)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/cover/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_OPEN_COVER, data)",
                "hass.services.call(DOMAIN, SERVICE_CLOSE_COVER, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_COVER_POSITION, data)",
                "hass.services.call(DOMAIN, SERVICE_STOP_COVER, data)",
                "hass.services.call(DOMAIN, SERVICE_OPEN_COVER_TILT, data)",
                "hass.services.call(DOMAIN, SERVICE_CLOSE_COVER_TILT, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_COVER_TILT_POSITION, data)",
                "hass.services.call(DOMAIN, SERVICE_STOP_COVER_TILT, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/device_tracker/nmap_tracker.py": [
                "arp = subprocess.Popen(cmd, stdout=subprocess.PIPE)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/__main__.py": [
                "subprocess.check_call(nt_args)",
                "subprocess.check_call(nt_args)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/group.py": [
                "hass.services.call(DOMAIN, SERVICE_RELOAD)",
                "hass.services.call(DOMAIN, SERVICE_SET_VISIBILITY, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/homematic.py": [
                "hass.services.call(DOMAIN, SERVICE_VIRTUALKEY, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_VAR_VALUE, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_DEV_VALUE, data)",
                "hass.services.call(DOMAIN, SERVICE_RECONNECT, {})",
                "hmdevice = _device_from_servicecall(hass, service)",
                "hmdevice = _device_from_servicecall(hass, service)",
                "def _device_from_servicecall(hass, service):"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/fan/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_TURN_ON, data)",
                "hass.services.call(DOMAIN, SERVICE_TURN_OFF, data)",
                "hass.services.call(DOMAIN, SERVICE_TOGGLE, data)",
                "hass.services.call(DOMAIN, SERVICE_OSCILLATE, data)",
                "hass.services.call(DOMAIN, SERVICE_SET_SPEED, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/device_tracker/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_SEE, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/sensor/command_line.py": [
                "return_value = subprocess.check_output(self.command, shell=True,timeout=15)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/util/package.py": [
                "return subprocess.call(args) == 0",
                "return subprocess.call(args) == 0"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/alarm_control_panel/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_ALARM_DISARM, data)",
                "hass.services.call(DOMAIN, SERVICE_ALARM_ARM_HOME, data)",
                "hass.services.call(DOMAIN, SERVICE_ALARM_ARM_AWAY, data)",
                "hass.services.call(DOMAIN, SERVICE_ALARM_TRIGGER, data)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/shell_command.py": [
                "subprocess.call(cmd, shell=shell,stdout=subprocess.DEVNULL,"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/scripts/macos/__init__.py": [
                "with os.popen('which hass') as inp:",
                "with os.popen('whoami') as inp:",
                "os.popen('launchctl load -w -F ' + path)",
                "os.popen('launchctl unload ' + path)"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/sensor/sensehat.py": [
                "res = os.popen(\"vcgencmd measure_temp\").readline()"
            ]
        },
        {
            "apps/multi/devicePresenseAlert/homeassistant/components/automation/__init__.py": [
                "hass.services.call(DOMAIN, SERVICE_TURN_ON, data)",
                "hass.services.call(DOMAIN, SERVICE_TURN_OFF, data)",
                "hass.services.call(DOMAIN, SERVICE_TOGGLE, data)",
                "hass.services.call(DOMAIN, SERVICE_TRIGGER, data)",
                "hass.services.call(DOMAIN, SERVICE_RELOAD)"
            ]
        }
    ],
    "apps/multi/tweetingPlants.py": [
        {
            "apps/multi/tweetingPlants.py": [
                "os.system(\"cd Desktop\\nsudo fswebcam image.jpg\")"
            ]
        }
    ]
}
