{
  __main__.sub: [
  {
      paho.mqtt.client.Client.__init__: [
      {
          paho.mqtt.client._socketpair_compat: [
          socket.socket.__init__, 
          socket.setsockopt, 
          socket.bind, 
          socket.listen, 
          socket.getsockname, 
          socket.setblocking, 
          {
              socket.connect: [
              {
                  socket.socket.accept: [
                  socket._accept, 
                  {
                      socket.socket.type: [
                      {
                          socket._intenum_converter: [
                          {
                              enum.EnumMeta.__call__: [ enum.Enum.__new__ ]
                            }
                          ]
                        }
                      ]
                    }, 
                  builtins.globals, 
                  dict.get, 
                  {
                      socket.socket.family: [
                      {
                          socket._intenum_converter: []
                        }
                      ]
                    }, 
                  socket.socket.__init__, 
                  _socket.getdefaulttimeout, 
                  socket.gettimeout
                  ]
                }, 
              socket.setblocking, 
              {
                  socket.socket.close: [ socket.socket._real_close ]
                }
              ]
            }, 
          str.join, 
          time.monotonic, 
          threading.RLock, 
          _thread.allocate_lock
          ]
        }
      ]
    }, 
  paho.mqtt.client.Client.on_connect, 
  paho.mqtt.client.Client.on_message, 
  {
      paho.mqtt.client.Client.tls_set: [
      {
          io.open: [
          {
              _bootlocale.getpreferredencoding: [ _locale.nl_langinfo ]
            }, 
          {
              codecs.BufferedIncrementalDecoder.__init__: [ codecs.IncrementalDecoder.__init__ ]
            }
          ]
        }, 
      TextIOWrapper.close
      ]
    }, 
  {
      paho.mqtt.client.Client.connect: [
      {
          paho.mqtt.client.Client.connect_async: [
          builtins.len, 
          lock.acquire, 
          lock.release
          ]
        }, 
      {
          paho.mqtt.client.Client.reconnect: [
          builtins.len, 
          lock.acquire, 
          lock.release, 
          time.monotonic, 
          {
              paho.mqtt.client.Client._messages_reconnect_reset: [
              {
                  paho.mqtt.client.Client._messages_reconnect_reset_out: [
                  lock.acquire, 
                  lock.release
                  ]
                }, 
              {
                  paho.mqtt.client.Client._messages_reconnect_reset_in: [
                  lock.acquire, 
                  lock.release
                  ]
                }
              ]
            }, 
          {
              socket.create_connection: [
              {
                  socket.getaddrinfo: [
                  {
                      _socket.getaddrinfo: [
                      {
                          encodings.search_function: [
                          dict.get, 
                          {
                              encodings.normalize_encoding: [
                              builtins.isinstance, 
                              str.isalnum, 
                              list.append, 
                              str.join
                              ]
                            }, 
                          str.replace, 
                          {
                              builtins.__import__: [
                              {
                                  _frozen_importlib._find_and_load: [
                                  _frozen_importlib._ModuleLockManager.__init__, 
                                  {
                                      _frozen_importlib._ModuleLockManager.__enter__: [
                                      {
                                          _frozen_importlib._get_module_lock: [
                                          {
                                              _frozen_importlib._ModuleLock.__init__: [ _thread.allocate_lock ]
                                            }
                                          ]
                                        }, 
                                      _imp.release_lock, 
                                      {
                                          _frozen_importlib._ModuleLock.acquire: [ _thread.get_ident ]
                                        }
                                      ]
                                    }, 
                                  {
                                      _frozen_importlib._find_and_load_unlocked: [
                                      str.rpartition, 
                                      {
                                          _frozen_importlib._find_spec: [
                                          {
                                              _frozen_importlib._ImportLockContext.__enter__: [ _imp.acquire_lock ]
                                            }, 
                                          _frozen_importlib.BuiltinImporter.find_spec, 
                                          {
                                              _frozen_importlib._ImportLockContext.__exit__: [ _imp.release_lock ]
                                            }, 
                                          {
                                              _frozen_importlib.FrozenImporter.find_spec: [ _imp.is_frozen ]
                                            }, 
                                          {
                                              _frozen_importlib_external.PathFinder.find_spec: [
                                              {
                                                  _frozen_importlib_external.PathFinder._get_spec: [
                                                  builtins.isinstance, 
                                                  _frozen_importlib_external.PathFinder._path_importer_cache, 
                                                  builtins.hasattr, 
                                                  {
                                                      _frozen_importlib_external.FileFinder.find_spec: [
                                                      str.rpartition, 
                                                      {
                                                          _frozen_importlib_external._path_stat: [ posix.stat ]
                                                        }, 
                                                      _frozen_importlib_external._make_relax_case.<locals>._relax_case, 
                                                      {
                                                          _frozen_importlib_external._path_join: [
                                                          {
                                                              importlib._bootstrap_external._path_join.<locals>.<listcomp>: [ str.rstrip ]
                                                            }, 
                                                          str.join
                                                          ]
                                                        }, 
                                                      str.format, 
                                                      _frozen_importlib_external._verbose_message, 
                                                      {
                                                          _frozen_importlib_external._path_isfile: [
                                                          {
                                                              _frozen_importlib_external._path_is_mode_type: [
                                                              {
                                                                  _frozen_importlib_external._path_stat: [ posix.stat ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }, 
                                                      {
                                                          _frozen_importlib_external.FileFinder._get_spec: [
                                                          _frozen_importlib_external.FileLoader.__init__, 
                                                          {
                                                              _frozen_importlib_external.spec_from_file_location: [ _frozen_importlib.ModuleSpec.__init__ ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }, 
                                      {
                                          _frozen_importlib._load_unlocked: [
                                          builtins.hasattr, 
                                          {
                                              _frozen_importlib.module_from_spec: [
                                              builtins.hasattr, 
                                              _frozen_importlib_external._LoaderBasics.create_module, 
                                              _frozen_importlib._new_module, 
                                              {
                                                  _frozen_importlib._init_module_attrs: [
                                                  builtins.getattr, 
                                                  {
                                                      _frozen_importlib.ModuleSpec.parent: [ str.rpartition ]
                                                    }, 
                                                  _frozen_importlib.ModuleSpec.has_location, 
                                                  {
                                                      _frozen_importlib.ModuleSpec.cached: [
                                                      {
                                                          _frozen_importlib_external._get_cached: [
                                                          str.endswith, 
                                                          {
                                                              _frozen_importlib_external.cache_from_source: [
                                                              {
                                                                  _frozen_importlib_external._path_split: [
                                                                  builtins.len, 
                                                                  str.rpartition
                                                                  ]
                                                                }, 
                                                              str.rpartition, 
                                                              str.join, 
                                                              {
                                                                  _frozen_importlib_external._path_join: [
                                                                  {
                                                                      importlib._bootstrap_external._path_join.<locals>.<listcomp>: [ str.rstrip ]
                                                                    }, 
                                                                  str.join
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }, 
                                          _frozen_importlib._installed_safely.__init__, 
                                          _frozen_importlib._installed_safely.__enter__, 
                                          {
                                              _frozen_importlib_external._LoaderBasics.exec_module: [
                                              {
                                                  _frozen_importlib_external.SourceLoader.get_code: [
                                                  {
                                                      _frozen_importlib_external.FileLoader.load_module: [ _frozen_importlib_external.FileLoader.get_filename ]
                                                    }, 
                                                  {
                                                      _frozen_importlib_external.cache_from_source: [
                                                      {
                                                          _frozen_importlib_external._path_split: [
                                                          builtins.len, 
                                                          str.rpartition
                                                          ]
                                                        }, 
                                                      str.rpartition, 
                                                      str.join, 
                                                      {
                                                          _frozen_importlib_external._path_join: []
                                                        }
                                                      ]
                                                    }, 
                                                  {
                                                      _frozen_importlib_external.SourceFileLoader.path_stats: [
                                                      {
                                                          _frozen_importlib_external._path_stat: []
                                                        }
                                                      ]
                                                    }, 
                                                  {
                                                      _frozen_importlib_external.FileLoader.get_data: [ FileIO.read ]
                                                    }, 
                                                  {
                                                      _frozen_importlib_external._validate_bytecode_header: [
                                                      builtins.len, 
                                                      {
                                                          _frozen_importlib_external._r_long: [ int.from_bytes ]
                                                        }
                                                      ]
                                                    }, 
                                                  _frozen_importlib_external._verbose_message, 
                                                  {
                                                      _frozen_importlib_external._compile_bytecode: [
                                                      marshal.loads, 
                                                      builtins.isinstance, 
                                                      _frozen_importlib_external._verbose_message, 
                                                      _imp._fix_co_filename
                                                      ]
                                                    }
                                                  ]
                                                }, 
                                              {
                                                  _frozen_importlib._call_with_frames_removed: [
                                                  {
                                                      builtins.exec: [
                                                      {
                                                          <module>: [
                                                          {
                                                              _frozen_importlib._find_and_load: [
                                                              _frozen_importlib._ModuleLockManager.__init__, 
                                                              {
                                                                  _frozen_importlib._ModuleLockManager.__enter__: [
                                                                  {
                                                                      _frozen_importlib._get_module_lock: [
                                                                      {
                                                                          _frozen_importlib._ModuleLock.__init__: [ _thread.allocate_lock ]
                                                                        }
                                                                      ]
                                                                    }, 
                                                                  _imp.release_lock, 
                                                                  {
                                                                      _frozen_importlib._ModuleLock.acquire: [ _thread.get_ident ]
                                                                    }
                                                                  ]
                                                                }, 
                                                              {
                                                                  _frozen_importlib._find_and_load_unlocked: [
                                                                  str.rpartition, 
                                                                  {
                                                                      _frozen_importlib._find_spec: [
                                                                      {
                                                                          _frozen_importlib._ImportLockContext.__enter__: [ _imp.acquire_lock ]
                                                                        }, 
                                                                      {
                                                                          _frozen_importlib.BuiltinImporter.find_spec: [ _imp.is_builtin ]
                                                                        }, 
                                                                      {
                                                                          _frozen_importlib._ImportLockContext.__exit__: [ _imp.release_lock ]
                                                                        }, 
                                                                      {
                                                                          _frozen_importlib.FrozenImporter.find_spec: [ _imp.is_frozen ]
                                                                        }, 
                                                                      {
                                                                          _frozen_importlib_external.PathFinder.find_spec: [
                                                                          {
                                                                              _frozen_importlib_external.PathFinder._get_spec: [
                                                                              builtins.isinstance, 
                                                                              _frozen_importlib_external.PathFinder._path_importer_cache, 
                                                                              builtins.hasattr, 
                                                                              {
                                                                                  _frozen_importlib_external.FileFinder.find_spec: [
                                                                                  str.rpartition, 
                                                                                  {
                                                                                      _frozen_importlib_external._path_stat: [ posix.stat ]
                                                                                    }, 
                                                                                  _frozen_importlib_external._make_relax_case.<locals>._relax_case, 
                                                                                  {
                                                                                      _frozen_importlib_external._path_join: [
                                                                                      {
                                                                                          importlib._bootstrap_external._path_join.<locals>.<listcomp>: [ str.rstrip ]
                                                                                        }, 
                                                                                      str.join
                                                                                      ]
                                                                                    }, 
                                                                                  str.format, 
                                                                                  _frozen_importlib_external._verbose_message, 
                                                                                  {
                                                                                      _frozen_importlib_external._path_isfile: [
                                                                                      {
                                                                                          _frozen_importlib_external._path_is_mode_type: [
                                                                                          {
                                                                                              _frozen_importlib_external._path_stat: [ posix.stat ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }, 
                                                                                  {
                                                                                      _frozen_importlib_external.FileFinder._get_spec: [
                                                                                      _frozen_importlib_external.FileLoader.__init__, 
                                                                                      {
                                                                                          _frozen_importlib_external.spec_from_file_location: [ _frozen_importlib.ModuleSpec.__init__ ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }, 
                                                                  {
                                                                      _frozen_importlib._load_unlocked: [
                                                                      builtins.hasattr, 
                                                                      {
                                                                          _frozen_importlib.module_from_spec: [
                                                                          builtins.hasattr, 
                                                                          _frozen_importlib_external._LoaderBasics.create_module, 
                                                                          _frozen_importlib._new_module, 
                                                                          {
                                                                              _frozen_importlib._init_module_attrs: [
                                                                              builtins.getattr, 
                                                                              {
                                                                                  _frozen_importlib.ModuleSpec.parent: [ str.rpartition ]
                                                                                }, 
                                                                              _frozen_importlib.ModuleSpec.has_location, 
                                                                              {
                                                                                  _frozen_importlib.ModuleSpec.cached: [
                                                                                  {
                                                                                      _frozen_importlib_external._get_cached: [
                                                                                      str.endswith, 
                                                                                      {
                                                                                          _frozen_importlib_external.cache_from_source: [
                                                                                          {
                                                                                              _frozen_importlib_external._path_split: [
                                                                                              builtins.len, 
                                                                                              str.rpartition
                                                                                              ]
                                                                                            }, 
                                                                                          str.rpartition, 
                                                                                          str.join, 
                                                                                          {
                                                                                              _frozen_importlib_external._path_join: [
                                                                                              {
                                                                                                  importlib._bootstrap_external._path_join.<locals>.<listcomp>: [ str.rstrip ]
                                                                                                }, 
                                                                                              str.join
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }, 
                                                                      _frozen_importlib._installed_safely.__init__, 
                                                                      _frozen_importlib._installed_safely.__enter__, 
                                                                      {
                                                                          _frozen_importlib_external._LoaderBasics.exec_module: [
                                                                          {
                                                                              _frozen_importlib_external.SourceLoader.get_code: [
                                                                              {
                                                                                  _frozen_importlib_external.FileLoader.load_module: [ _frozen_importlib_external.FileLoader.get_filename ]
                                                                                }, 
                                                                              {
                                                                                  _frozen_importlib_external.cache_from_source: [
                                                                                  {
                                                                                      _frozen_importlib_external._path_split: [
                                                                                      builtins.len, 
                                                                                      str.rpartition
                                                                                      ]
                                                                                    }, 
                                                                                  str.rpartition, 
                                                                                  str.join, 
                                                                                  {
                                                                                      _frozen_importlib_external._path_join: []
                                                                                    }
                                                                                  ]
                                                                                }, 
                                                                              {
                                                                                  _frozen_importlib_external.SourceFileLoader.path_stats: [
                                                                                  {
                                                                                      _frozen_importlib_external._path_stat: []
                                                                                    }
                                                                                  ]
                                                                                }, 
                                                                              {
                                                                                  _frozen_importlib_external.FileLoader.get_data: [ FileIO.read ]
                                                                                }, 
                                                                              {
                                                                                  _frozen_importlib_external._validate_bytecode_header: [
                                                                                  builtins.len, 
                                                                                  {
                                                                                      _frozen_importlib_external._r_long: [ int.from_bytes ]
                                                                                    }
                                                                                  ]
                                                                                }, 
                                                                              _frozen_importlib_external._verbose_message, 
                                                                              {
                                                                                  _frozen_importlib_external._compile_bytecode: [
                                                                                  marshal.loads, 
                                                                                  builtins.isinstance, 
                                                                                  _frozen_importlib_external._verbose_message, 
                                                                                  _imp._fix_co_filename
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }, 
                                                                          {
                                                                              _frozen_importlib._call_with_frames_removed: [
                                                                              {
                                                                                  builtins.exec: [
                                                                                  {
                                                                                      <module>: [
                                                                                      {
                                                                                          _frozen_importlib._find_and_load: [
                                                                                          _frozen_importlib._ModuleLockManager.__init__, 
                                                                                          {
                                                                                              _frozen_importlib._ModuleLockManager.__enter__: [
                                                                                              {
                                                                                                  _frozen_importlib._get_module_lock: [
                                                                                                  {
                                                                                                      _frozen_importlib._ModuleLock.__init__: [ _thread.allocate_lock ]
                                                                                                    }
                                                                                                  ]
                                                                                                }, 
                                                                                              _imp.release_lock, 
                                                                                              {
                                                                                                  _frozen_importlib._ModuleLock.acquire: [ _thread.get_ident ]
                                                                                                }
                                                                                              ]
                                                                                            }, 
                                                                                          {
                                                                                              _frozen_importlib._find_and_load_unlocked: [
                                                                                              str.rpartition, 
                                                                                              {
                                                                                                  _frozen_importlib._find_spec: [
                                                                                                  {
                                                                                                      _frozen_importlib._ImportLockContext.__enter__: [ _imp.acquire_lock ]
                                                                                                    }, 
                                                                                                  {
                                                                                                      _frozen_importlib.BuiltinImporter.find_spec: [
                                                                                                      _imp.is_builtin, 
                                                                                                      {
                                                                                                          _frozen_importlib.spec_from_loader: [
                                                                                                          builtins.hasattr, 
                                                                                                          {
                                                                                                              _frozen_importlib.BuiltinImporter.get_source: [ _frozen_importlib.BuiltinImporter.is_package ]
                                                                                                            }, 
                                                                                                          _frozen_importlib.ModuleSpec.__init__
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }, 
                                                                                                  {
                                                                                                      _frozen_importlib._ImportLockContext.__exit__: [ _imp.release_lock ]
                                                                                                    }
                                                                                                  ]
                                                                                                }, 
                                                                                              {
                                                                                                  _frozen_importlib._load_unlocked: [
                                                                                                  builtins.hasattr, 
                                                                                                  {
                                                                                                      _frozen_importlib.module_from_spec: [
                                                                                                      builtins.hasattr, 
                                                                                                      {
                                                                                                          _frozen_importlib.BuiltinImporter.create_module: [
                                                                                                          {
                                                                                                              _frozen_importlib._call_with_frames_removed: [ _imp.create_builtin ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }, 
                                                                                                      {
                                                                                                          _frozen_importlib._init_module_attrs: [
                                                                                                          builtins.getattr, 
                                                                                                          {
                                                                                                              _frozen_importlib.ModuleSpec.parent: [ str.rpartition ]
                                                                                                            }, 
                                                                                                          _frozen_importlib.ModuleSpec.has_location
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }, 
                                                                                                  _frozen_importlib._installed_safely.__init__, 
                                                                                                  _frozen_importlib._installed_safely.__enter__, 
                                                                                                  {
                                                                                                      _frozen_importlib.BuiltinImporter.exec_module: [
                                                                                                      {
                                                                                                          _frozen_importlib._call_with_frames_removed: [ _imp.exec_builtin ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }, 
                                                                                                  {
                                                                                                      _frozen_importlib._installed_safely.__exit__: [
                                                                                                      {
                                                                                                          builtins.any: [ <genexpr> ]
                                                                                                        }, 
                                                                                                      _frozen_importlib._verbose_message
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }, 
                                                                                          {
                                                                                              _frozen_importlib._ModuleLockManager.__exit__: [
                                                                                              {
                                                                                                  _frozen_importlib._ModuleLock.release: [ _thread.get_ident ]
                                                                                                }
                                                                                              ]
                                                                                            }, 
                                                                                          importlib._bootstrap._get_module_lock.<locals>.cb
                                                                                          ]
                                                                                        }, 
                                                                                      {
                                                                                          _frozen_importlib._handle_fromlist: [ builtins.hasattr ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }, 
                                                                      {
                                                                          _frozen_importlib._installed_safely.__exit__: [
                                                                          {
                                                                              builtins.any: [ <genexpr> ]
                                                                            }, 
                                                                          _frozen_importlib._verbose_message
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }, 
                                                              {
                                                                  _frozen_importlib._ModuleLockManager.__exit__: [
                                                                  {
                                                                      _frozen_importlib._ModuleLock.release: [ _thread.get_ident ]
                                                                    }
                                                                  ]
                                                                }, 
                                                              importlib._bootstrap._get_module_lock.<locals>.cb
                                                              ]
                                                            }, 
                                                          {
                                                              _frozen_importlib._handle_fromlist: [ builtins.hasattr ]
                                                            }, 
                                                          {
                                                              re.compile: [
                                                              {
                                                                  re._compile: [
                                                                  builtins.isinstance, 
                                                                  {
                                                                      sre_compile.isstring: [ builtins.isinstance ]
                                                                    }, 
                                                                  {
                                                                      sre_compile.compile: [
                                                                      {
                                                                          sre_compile.isstring: [ builtins.isinstance ]
                                                                        }, 
                                                                      {
                                                                          sre_parse.parse: [
                                                                          {
                                                                              sre_parse.Tokenizer.__init__: [
                                                                              builtins.isinstance, 
                                                                              sre_parse.Tokenizer.__next
                                                                              ]
                                                                            }, 
                                                                          sre_parse.Pattern.__init__, 
                                                                          {
                                                                              sre_parse._parse_sub: [
                                                                              {
                                                                                  sre_parse.Tokenizer.tell: [ builtins.len ]
                                                                                }, 
                                                                              {
                                                                                  sre_parse._parse: [
                                                                                  sre_parse.SubPattern.__init__, 
                                                                                  {
                                                                                      sre_parse.Tokenizer.get: [ sre_parse.Tokenizer.__next ]
                                                                                    }, 
                                                                                  {
                                                                                      sre_parse.Tokenizer.tell: [ builtins.len ]
                                                                                    }, 
                                                                                  sre_parse.Tokenizer.match, 
                                                                                  builtins.ord, 
                                                                                  list.append, 
                                                                                  builtins.len, 
                                                                                  {
                                                                                      sre_parse.SubPattern.append: [ list.append ]
                                                                                    }
                                                                                  ]
                                                                                }, 
                                                                              list.append, 
                                                                              sre_parse.Tokenizer.match, 
                                                                              builtins.len
                                                                              ]
                                                                            }, 
                                                                          {
                                                                              sre_parse.fix_flags: [ builtins.isinstance ]
                                                                            }
                                                                          ]
                                                                        }, 
                                                                      {
                                                                          sre_compile._code: [
                                                                          {
                                                                              sre_compile._compile_info: [
                                                                              {
                                                                                  sre_parse.SubPattern.getwidth: [ builtins.min ]
                                                                                }, 
                                                                              list.append, 
                                                                              builtins.len, 
                                                                              builtins.min, 
                                                                              {
                                                                                  sre_compile._compile_charset: [
                                                                                  {
                                                                                      sre_compile._optimize_charset: [
                                                                                      builtins.len, 
                                                                                      bytearray.find, 
                                                                                      list.append, 
                                                                                      {
                                                                                          sre_compile._mk_bitmap: [
                                                                                          bytearray.translate, 
                                                                                          builtins.len, 
                                                                                          sre_compile._mk_bitmap.<locals>.<listcomp>
                                                                                          ]
                                                                                        }, 
                                                                                      {
                                                                                          sre_compile._bytes_to_codes: [
                                                                                          memoryview.cast, 
                                                                                          builtins.len, 
                                                                                          memoryview.tolist
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }, 
                                                                                  list.append, 
                                                                                  list.extend
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }, 
                                                                          {
                                                                              sre_compile._compile: [
                                                                              list.append, 
                                                                              builtins.len, 
                                                                              {
                                                                                  sre_compile._compile_charset: []
                                                                                }
                                                                              ]
                                                                            }, 
                                                                          list.append
                                                                          ]
                                                                        }, 
                                                                      {
                                                                          sre_parse.Pattern.groups: [ builtins.len ]
                                                                        }, 
                                                                      dict.items, 
                                                                      _sre.compile
                                                                      ]
                                                                    }, 
                                                                  builtins.len
                                                                  ]
                                                                }
                                                              ]
                                                            }, 
                                                          {
                                                              builtins.__build_class__: [
                                                              encodings.idna.Codec, 
                                                              encodings.idna.IncrementalEncoder, 
                                                              encodings.idna.IncrementalDecoder, 
                                                              encodings.idna.StreamWriter, 
                                                              encodings.idna.StreamReader
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }, 
                                          {
                                              _frozen_importlib._installed_safely.__exit__: [
                                              {
                                                  builtins.any: [ <genexpr> ]
                                                }, 
                                              _frozen_importlib._verbose_message
                                              ]
                                            }
                                          ]
                                        }, 
                                      builtins.setattr
                                      ]
                                    }, 
                                  {
                                      _frozen_importlib._ModuleLockManager.__exit__: [
                                      {
                                          _frozen_importlib._ModuleLock.release: [ _thread.get_ident ]
                                        }
                                      ]
                                    }, 
                                  importlib._bootstrap._get_module_lock.<locals>.cb
                                  ]
                                }, 
                              {
                                  _frozen_importlib._handle_fromlist: [ builtins.hasattr ]
                                }
                              ]
                            }, 
                          {
                              encodings.idna.getregentry: [
                              {
                                  codecs.CodecInfo.__new__: [ tuple.__new__ ]
                                }
                              ]
                            }, 
                          builtins.isinstance
                          ]
                        }, 
                      {
                          encodings.idna.Codec.encode: [
                          str.encode, 
                          bytes.split, 
                          builtins.len
                          ]
                        }
                      ]
                    }, 
                  {
                      socket._intenum_converter: [
                      {
                          enum.EnumMeta.__call__: [ enum.Enum.__new__ ]
                        }
                      ]
                    }, 
                  list.append
                  ]
                }, 
              socket.socket.__init__, 
              socket.bind, 
              socket.connect
              ]
            }, 
          {
              ssl.wrap_socket: [
              {
                  ssl.SSLSocket.__init__: [
                  {
                      ssl.SSLContext.__new__: [
                      _SSLContext.__new__, 
                      SSLContext.set_ciphers
                      ]
                    }, 
                  ssl.SSLContext.__init__, 
                  SSLContext.load_verify_locations, 
                  SSLContext.load_cert_chain, 
                  socket.getsockopt, 
                  {
                      socket.socket.family: []
                    }, 
                  {
                      socket.socket.type: []
                    }, 
                  socket.fileno, 
                  socket.socket.__init__, 
                  socket.gettimeout, 
                  SSLSocket.settimeout, 
                  {
                      socket.socket.detach: [ socket.detach ]
                    }, 
                  SSLSocket.getpeername, 
                  SSLContext._wrap_socket, 
                  ssl.SSLObject.__init__, 
                  SSLSocket.gettimeout, 
                  {
                      ssl.SSLSocket.do_handshake: [
                      ssl.SSLSocket._check_connected, 
                      SSLSocket.gettimeout, 
                      {
                          ssl.SSLObject.do_handshake: [
                          _SSLSocket.do_handshake, 
                          ssl.SSLObject.context
                          ]
                        }, 
                      SSLSocket.settimeout
                      ]
                    }
                  ]
                }
              ]
            }, 
          {
              ssl.SSLSocket.getpeercert: [
              ssl.SSLSocket._checkClosed, 
              ssl.SSLSocket._check_connected, 
              {
                  ssl.SSLObject.getpeercert: [ _SSLSocket.peer_certificate ]
                }
              ]
            }, 
          {
              ssl.match_hostname: [
              {
                  ipaddress.ip_address: [
                  {
                      ipaddress.IPv4Address.__init__: [
                      builtins.isinstance, 
                      {
                          ipaddress._BaseV4._ip_int_from_string: [
                          str.split, 
                          builtins.len
                          ]
                        }
                      ]
                    }, 
                  {
                      ipaddress.IPv6Address.__init__: [
                      builtins.isinstance, 
                      {
                          ipaddress._BaseV6._ip_int_from_string: [
                          str.split, 
                          builtins.len
                          ]
                        }
                      ]
                    }
                  ]
                }, 
              dict.get, 
              {
                  ssl._dnsname_match: [
                  str.split, 
                  str.count, 
                  str.lower, 
                  list.append, 
                  {
                      re.escape: [
                      builtins.isinstance, 
                      str.join
                      ]
                    }, 
                  str.join, 
                  {
                      re.compile: [
                      {
                          re._compile: [
                          builtins.isinstance, 
                          {
                              sre_compile.isstring: [ builtins.isinstance ]
                            }, 
                          {
                              sre_compile.compile: [
                              {
                                  sre_compile.isstring: [ builtins.isinstance ]
                                }, 
                              {
                                  sre_parse.parse: [
                                  {
                                      sre_parse.Tokenizer.__init__: [
                                      builtins.isinstance, 
                                      sre_parse.Tokenizer.__next
                                      ]
                                    }, 
                                  sre_parse.Pattern.__init__, 
                                  {
                                      sre_parse._parse_sub: [
                                      {
                                          sre_parse.Tokenizer.tell: [
                                          {
                                              builtins.len: [
                                              {
                                                  sre_parse.SubPattern.__len__: [ builtins.len ]
                                                }
                                              ]
                                            }
                                          ]
                                        }, 
                                      {
                                          sre_parse._parse: [
                                          sre_parse.SubPattern.__init__, 
                                          {
                                              sre_parse.Tokenizer.get: [ sre_parse.Tokenizer.__next ]
                                            }, 
                                          {
                                              sre_parse._escape: [
                                              dict.get, 
                                              builtins.len, 
                                              builtins.ord
                                              ]
                                            }, 
                                          {
                                              sre_parse.SubPattern.append: [ list.append ]
                                            }, 
                                          {
                                              sre_parse.Tokenizer.tell: [ builtins.len ]
                                            }, 
                                          {
                                              sre_parse.Tokenizer.match: [ sre_parse.Tokenizer.__next ]
                                            }, 
                                          list.append, 
                                          builtins.ord, 
                                          {
                                              builtins.len: []
                                            }, 
                                          {
                                              sre_parse.SubPattern.__len__: [ builtins.len ]
                                            }, 
                                          {
                                              sre_parse.SubPattern.__getitem__: [
                                              builtins.isinstance, 
                                              sre_parse.SubPattern.__init__
                                              ]
                                            }, 
                                          sre_parse.SubPattern.__setitem__
                                          ]
                                        }, 
                                      list.append, 
                                      sre_parse.Tokenizer.match, 
                                      builtins.len
                                      ]
                                    }, 
                                  {
                                      sre_parse.fix_flags: [ builtins.isinstance ]
                                    }
                                  ]
                                }, 
                              {
                                  sre_compile._code: [
                                  {
                                      sre_compile._compile_info: [
                                      {
                                          sre_parse.SubPattern.getwidth: [
                                          {
                                              sre_parse.SubPattern.getwidth: [ builtins.min ]
                                            }, 
                                          builtins.min
                                          ]
                                        }, 
                                      list.append, 
                                      builtins.len, 
                                      builtins.min
                                      ]
                                    }, 
                                  {
                                      sre_compile._compile: [
                                      list.append, 
                                      dict.get, 
                                      {
                                          sre_compile._simple: [
                                          {
                                              sre_parse.SubPattern.getwidth: []
                                            }, 
                                          {
                                              sre_parse.SubPattern.__getitem__: []
                                            }
                                          ]
                                        }, 
                                      builtins.len, 
                                      {
                                          sre_compile._compile: [
                                          {
                                              sre_parse.SubPattern.__getitem__: []
                                            }, 
                                          _sre.getlower, 
                                          list.append
                                          ]
                                        }, 
                                      _sre.getlower
                                      ]
                                    }, 
                                  list.append
                                  ]
                                }, 
                              {
                                  sre_parse.Pattern.groups: [ builtins.len ]
                                }, 
                              dict.items, 
                              _sre.compile
                              ]
                            }, 
                          builtins.len
                          ]
                        }
                      ]
                    }, 
                  SRE_Pattern.match
                  ]
                }, 
              list.append
              ]
            }, 
          SSLSocket.setblocking, 
          {
              paho.mqtt.client.Client._send_connect: [
              builtins.len, 
              _struct.pack, 
              bytearray.extend, 
              {
                  paho.mqtt.client.Client._pack_remaining_length: [
                  list.append, 
                  _struct.pack, 
                  bytearray.extend
                  ]
                }, 
              {
                  paho.mqtt.client.Client._pack_str16: [
                  builtins.isinstance, 
                  str.encode, 
                  builtins.len, 
                  _struct.pack, 
                  bytearray.extend
                  ]
                }, 
              {
                  paho.mqtt.client.Client._packet_queue: [
                  builtins.len, 
                  lock.acquire, 
                  list.append, 
                  list.pop, 
                  lock.release, 
                  socket.send, 
                  {
                      paho.mqtt.client.Client.loop_write: [
                      builtins.len, 
                      {
                          paho.mqtt.client.Client._packet_write: [
                          lock.acquire, 
                          {
                              ssl.SSLSocket.write: [
                              ssl.SSLSocket._checkClosed, 
                              {
                                  ssl.SSLObject.write: [ _SSLSocket.write ]
                                }
                              ]
                            }, 
                          builtins.len, 
                          lock.release, 
                          time.monotonic
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }, 
  {
      paho.mqtt.client.Client.loop_forever: [
      {
          paho.mqtt.client.Client.loop: [
          lock.acquire, 
          builtins.len, 
          lock.release, 
          paho.mqtt.client.Client.socket, 
          select.select, 
          list.insert, 
          socket.recv, 
          {
              paho.mqtt.client.Client.loop_write: [
              builtins.len, 
              {
                  paho.mqtt.client.Client._packet_write: [
                  lock.acquire, 
                  lock.release, 
                  time.monotonic
                  ]
                }
              ]
            }, 
          {
              paho.mqtt.client.Client.loop_misc: [
              time.monotonic, 
              {
                  paho.mqtt.client.Client._check_keepalive: [
                  time.monotonic, 
                  lock.acquire, 
                  lock.release, 
                  {
                      socket.socket.close: [
                      {
                          ssl.SSLSocket._real_close: [ socket.socket._real_close ]
                        }, 
                      socket.socket._real_close
                      ]
                    }, 
                  RLock.acquire, 
                  paho.mqtt.client.Client.on_disconnect, 
                  RLock.release
                  ]
                }, 
              {
                  paho.mqtt.client.Client._message_retry_check: [
                  {
                      paho.mqtt.client.Client._message_retry_check_actual: [
                      lock.acquire, 
                      time.monotonic, 
                      lock.release
                      ]
                    }
                  ]
                }
              ]
            }, 
          time.sleep, 
          {
              paho.mqtt.client.Client.reconnect: [
              builtins.len, 
              lock.acquire, 
              lock.release, 
              time.monotonic, 
              {
                  socket.socket.close: []
                }, 
              {
                  paho.mqtt.client.Client._messages_reconnect_reset: [
                  {
                      paho.mqtt.client.Client._messages_reconnect_reset_out: [
                      lock.acquire, 
                      lock.release
                      ]
                    }, 
                  {
                      paho.mqtt.client.Client._messages_reconnect_reset_in: [
                      lock.acquire, 
                      lock.release
                      ]
                    }
                  ]
                }, 
              {
                  socket.create_connection: [
                  {
                      socket.getaddrinfo: [
                      {
                          _socket.getaddrinfo: [
                          {
                              encodings.idna.Codec.encode: [
                              str.encode, 
                              bytes.split, 
                              builtins.len
                              ]
                            }
                          ]
                        }, 
                      {
                          socket._intenum_converter: []
                        }, 
                      list.append
                      ]
                    }, 
                  socket.socket.__init__, 
                  socket.bind, 
                  socket.connect
                  ]
                }, 
              {
                  ssl.wrap_socket: [
                  {
                      ssl.SSLSocket.__init__: [
                      {
                          ssl.SSLContext.__new__: [
                          _SSLContext.__new__, 
                          SSLContext.set_ciphers
                          ]
                        }, 
                      ssl.SSLContext.__init__, 
                      SSLContext.load_verify_locations, 
                      SSLContext.load_cert_chain, 
                      socket.getsockopt, 
                      {
                          socket.socket.family: [
                          {
                              socket._intenum_converter: [
                              {
                                  enum.EnumMeta.__call__: [ enum.Enum.__new__ ]
                                }
                              ]
                            }
                          ]
                        }, 
                      {
                          socket.socket.type: [
                          {
                              socket._intenum_converter: []
                            }
                          ]
                        }, 
                      socket.fileno, 
                      socket.socket.__init__, 
                      socket.gettimeout, 
                      SSLSocket.settimeout, 
                      {
                          socket.socket.detach: [ socket.detach ]
                        }, 
                      SSLSocket.getpeername, 
                      SSLContext._wrap_socket, 
                      ssl.SSLObject.__init__, 
                      SSLSocket.gettimeout, 
                      {
                          ssl.SSLSocket.do_handshake: [
                          ssl.SSLSocket._check_connected, 
                          SSLSocket.gettimeout, 
                          {
                              ssl.SSLObject.do_handshake: [
                              _SSLSocket.do_handshake, 
                              ssl.SSLObject.context
                              ]
                            }, 
                          SSLSocket.settimeout
                          ]
                        }
                      ]
                    }
                  ]
                }, 
              {
                  ssl.SSLSocket.getpeercert: [
                  ssl.SSLSocket._checkClosed, 
                  ssl.SSLSocket._check_connected, 
                  {
                      ssl.SSLObject.getpeercert: [ _SSLSocket.peer_certificate ]
                    }
                  ]
                }, 
              {
                  ssl.match_hostname: [
                  {
                      ipaddress.ip_address: [
                      {
                          ipaddress.IPv4Address.__init__: [
                          builtins.isinstance, 
                          {
                              ipaddress._BaseV4._ip_int_from_string: [
                              str.split, 
                              builtins.len
                              ]
                            }
                          ]
                        }, 
                      {
                          ipaddress.IPv6Address.__init__: [
                          builtins.isinstance, 
                          {
                              ipaddress._BaseV6._ip_int_from_string: [
                              str.split, 
                              builtins.len
                              ]
                            }
                          ]
                        }
                      ]
                    }, 
                  dict.get, 
                  {
                      ssl._dnsname_match: [
                      str.split, 
                      str.count, 
                      str.lower, 
                      list.append, 
                      {
                          re.escape: [
                          builtins.isinstance, 
                          str.join
                          ]
                        }, 
                      str.join, 
                      {
                          re.compile: [ re._compile ]
                        }, 
                      SRE_Pattern.match
                      ]
                    }, 
                  list.append
                  ]
                }, 
              SSLSocket.setblocking, 
              {
                  paho.mqtt.client.Client._send_connect: [
                  builtins.len, 
                  _struct.pack, 
                  bytearray.extend, 
                  {
                      paho.mqtt.client.Client._pack_remaining_length: [
                      list.append, 
                      _struct.pack, 
                      bytearray.extend
                      ]
                    }, 
                  {
                      paho.mqtt.client.Client._pack_str16: [
                      builtins.isinstance, 
                      str.encode, 
                      builtins.len, 
                      _struct.pack, 
                      bytearray.extend
                      ]
                    }, 
                  {
                      paho.mqtt.client.Client._packet_queue: [
                      builtins.len, 
                      lock.acquire, 
                      list.append, 
                      list.pop, 
                      lock.release, 
                      socket.send, 
                      {
                          paho.mqtt.client.Client.loop_write: [
                          builtins.len, 
                          {
                              paho.mqtt.client.Client._packet_write: [
                              lock.acquire, 
                              {
                                  ssl.SSLSocket.write: [
                                  ssl.SSLSocket._checkClosed, 
                                  {
                                      ssl.SSLObject.write: [ _SSLSocket.write ]
                                    }
                                  ]
                                }, 
                              builtins.len, 
                              lock.release, 
                              time.monotonic
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }, 
          {
              paho.mqtt.client.Client.loop: [
              lock.acquire, 
              builtins.len, 
              lock.release, 
              paho.mqtt.client.Client.socket, 
              select.select, 
              list.insert, 
              socket.recv, 
              {
                  paho.mqtt.client.Client.loop_write: [
                  builtins.len, 
                  {
                      paho.mqtt.client.Client._packet_write: [
                      lock.acquire, 
                      lock.release, 
                      time.monotonic
                      ]
                    }
                  ]
                }, 
              {
                  paho.mqtt.client.Client.loop_misc: [
                  time.monotonic, 
                  {
                      paho.mqtt.client.Client._check_keepalive: [
                      time.monotonic, 
                      lock.acquire, 
                      lock.release, 
                      {
                          socket.socket.close: [
                          {
                              ssl.SSLSocket._real_close: [ socket.socket._real_close ]
                            }
                          ]
                        }, 
                      RLock.acquire, 
                      paho.mqtt.client.Client.on_disconnect, 
                      RLock.release
                      ]
                    }, 
                  {
                      paho.mqtt.client.Client._message_retry_check: [
                      {
                          paho.mqtt.client.Client._message_retry_check_actual: [
                          lock.acquire, 
                          time.monotonic, 
                          lock.release
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
